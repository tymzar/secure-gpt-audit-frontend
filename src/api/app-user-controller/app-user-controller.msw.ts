/**
 * Generated by orval v6.15.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getAddUserMock = () => ({id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), email: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word()})

export const getGetUsersMock = () => (Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), email: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word()})))

export const getGetUserByUUIDMock = () => ({id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), email: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word()})

export const getGetUserByEmailMock = () => ({id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]), email: faker.random.word(), firstName: faker.random.word(), lastName: faker.random.word()})

export const getAppUserControllerMSW = () => [
rest.post('*/users/add', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getAddUserMock()),
        )
      }),rest.get('*/users', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUsersMock()),
        )
      }),rest.get('*/users/user/:uuid', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserByUUIDMock()),
        )
      }),rest.get('*/users/getByEmail', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetUserByEmailMock()),
        )
      }),]
