openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://homeserver.barpec12.pl:8080
  description: Generated server url
paths:
  /users/add:
    post:
      tags:
      - app-user-controller
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppUser'
  /tagger/find-sanitizable:
    post:
      tags:
      - tagger-controller
      operationId: findSanitizable
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Segment'
  /audit/add-log:
    post:
      tags:
      - audit-controller
      operationId: addLogToDatabase
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatQueryDTO'
        required: true
      responses:
        "200":
          description: OK
  /users:
    get:
      tags:
      - app-user-controller
      operationId: getUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AppUser'
  /users/user/{uuid}:
    get:
      tags:
      - app-user-controller
      operationId: getUserByUUID
      parameters:
      - name: uuid
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppUser'
  /users/getByEmail:
    get:
      tags:
      - app-user-controller
      operationId: getUserByEmail
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AppUser'
  /audit/get-logs:
    get:
      tags:
      - audit-controller
      operationId: fetchDatabase
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatQuery'
  /audit/get-logs-between:
    get:
      tags:
      - audit-controller
      operationId: fetchDatabaseSubset
      parameters:
      - name: from
        in: query
        required: true
        schema:
          type: string
          format: date-time
      - name: to
        in: query
        required: true
        schema:
          type: string
          format: date-time
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatQuery'
components:
  schemas:
    AppUser:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    Segment:
      type: object
      properties:
        segmentIndex:
          type: integer
          format: int32
        segmentContent:
          type: string
        segmentType:
          type: string
    AppUserService:
      type: object
      properties:
        allUsers:
          type: array
          items:
            $ref: '#/components/schemas/AppUser'
    ChatQueryDTO:
      required:
      - id
      - queryContent
      - sanitizedQueryContent
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        queryContent:
          type: string
        sanitizedQueryContent:
          type: string
        userService:
          $ref: '#/components/schemas/AppUserService'
    ChatQuery:
      required:
      - queryContent
      - sanitizedQueryContent
      - timestamp
      - user
      type: object
      properties:
        id:
          type: integer
          format: int64
        timestamp:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/AppUser'
        queryContent:
          type: string
        sanitizedQueryContent:
          type: string
